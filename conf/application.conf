
play.crypto.secret = "changeme"

play.i18n.langs = [ "en" ]

play.server.netty.transport = "native"

# Dispatchers and Executors #
#
# https://www.playframework.com/documentation/2.5.x/ThreadPools
# http://doc.akka.io/docs/akka/current/scala/dispatchers.html

# - Pinned Dispatcher:
#  -> 1 unique thread per actor
#  -> 1 mailbox per actor
#
# - Balancing Dispatcher:
#  -> 1 mailbox for all actors of the same type
#  -> variable number of threads
#
# - Calling Thread Dispatcher:
#  -> 1 thread per call
#  -> 1 mailbox per actor per thread
#  -> everything runs on the calling thread
#  -> good for testing or finding errors (stacktraces)
#
# - Custom Dispatcher: 
#  -> 1 mailbox per actor
#  -> configure threads with an executor

# General configuration if you don't sweat the details
# - Pure Async:
#  -> no blocking
#  -> 1 thread per CPU
#  -> Play default all the way! (fork-join-executor)
#
# - Highly Synchronous:
#  -> mostly blocking (e.g. JDBC IO, Apache HTTP client, Java InputStream)
#  -> like traditional web frameworks / servlet containers
#  -> set default to fixed size thread-pool-executor with many threads
#  -> good measure: connections in pool + CPUs + some housekeeping

# Detailed configuration for more fine grained control
# - Many Specific Thread Pools:
#  -> Play default for non blocking tasks
#  -> dispatch blocking tasks to thread-pool-executors (e.g. a pool for JDBC IO)
#
# - Few Specific Thread Pools:
#  -> Highly Synchronous default
#  -> dispatch very expensive tasks to other executors

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  actor {
    debug {
      receive = off
      autoreceive = off
      lifecycle = off
      unhandled = on
    }
    
    #akka dispatchers can be used like executors
    blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor {
        #fixed-pool-size = 32
        core-pool-size-min = 8
        core-pool-size-factor = 3.0 #corePoolSize = available processors * factor (4 * 3 = 12)
        core-pool-size-max = 64
      }
      
      # number of messages that are processed in a batch
      throughput = 1
    }
    
    # assign specific actor to dispatcher
    deployment {
      /example { #path of the actor
        dispatcher = blocking-io-dispatcher
      }
    }
  }
}
